package jianZhiOffer.num10_Fibonacci;
/**
 * 相关题目--青蛙跳台阶
 * 一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
 *
 * 解析：到达1级台阶只有1种可能，到达2级台阶有2种可能；可记为f(1) = 1,f(2) = 2。
 * 要到达3级台阶，可以选择在1级台阶处起跳，也可以选择在2级台阶处起跳，所以只需求到达1级台阶的可能情况 + 到达2级台阶的可能情况，即f(3) = f(2) +f(1)
 * 同理到达n级台阶，可以在n-1级台阶起跳，也可在n-2级台阶起跳，f(n) = f(n-2)+f(n-1)
 *
 *
 * 扩展1：一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
 * 到达1级台阶只有1种可能，到达2级台阶有2种可能；可记为f(1) = 1,f(2) = 2。
 * 要到达3级台阶，可以选择在1级台阶处起跳，也可以选择在2级台阶处起跳，也可直接跳到3级，所以只需求到达1级台阶的可能情况 + 到达2级台阶的可能情况 + 1，即f(3) = f(2) +f(1) + 1
 * 同理到达n级台阶，可以在n-1级台阶起跳，可在n-2、n-1、n-3...级台阶起跳，f(n) = f(n-1)+f(n-2)+f(n-3)...+1,如果令f(n-n) = f(0) = 1,上式可表示为f(n) = f(n-1)+f(n-2)+f(n-3)...+f(n-n)，有了通项公式找出规律也不是难事了，
 * 不过还有种更好理解的思路：前n-1级台阶，每级台阶都有两种选择——跳到此或不跳到此，对于最后一级n级，没得选择，必须跳到这里，所以总共有有2^(n-1)种跳法。
 *
 * 扩展2：矩形覆盖问题：我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？
 * n=1，f(1) = 1；n=2，f(2) = 2
 *  —      ——      ——
 * | |    | | |     |——|
 * —     ——       ——
 * n=3,f(3) =3 ;n=4，f(4) = 5
 * 当最后一步是竖着放时候，说明前一步已经覆盖了2*(n-1)，记为f(n - 1)
 * 当最后一步是横着放的时候，倒数第二次也必然是横着放的。这个状态已经覆盖了2* (n-2)，记为f(n - 2)
 */
public class JumpFloor {
    public int jumpFloor(int target) {
        if (target==1) return 1;
        if (target==2) return 2;
        int pre = 1;
        int sum = 2;
        for (int i = 2 ; i<=target;i++){
            sum = pre+sum;
            pre = sum-pre;
        }
        return sum;
    }
}
