package jianZhiOffer.num10_Fibonacci;
/**
 * 扩展1：一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
 * 到达1级台阶只有1种可能，到达2级台阶有2种可能；可记为f(1) = 1;
 * 到达2级台阶,可以选择经转台阶1，也可以不通过台阶1，因此f(2) = 2*f(1)。
 * 要到达3级台阶，可以选择经转台阶2，也可以不通过台阶2，所以f(3) = 2*f(2)
 * 同理到达n级台阶，可以在n-1级台阶起跳，可以不从n-1级台阶起跳，f(n) = 2*f(n-1)，即多一个台阶就多两倍的选择，在原来的基础上通过或者不通过这个增加的台阶。
 * 不过还有种更好理解的思路：前n-1级台阶，每级台阶都有两种选择——跳到此或不跳到此，对于最后一级n级，没得选择，必须跳到这里，所以总共有有2^(n-1)种跳法。
 */

public class JumpFloorII {
    public int jumpFloorII(int target) {
        if(target<=1) return target;
        int sum = 1;
        for (int i = 2 ; i<=target;i++){
            sum = 2*sum;
        }
        return sum;
    }
}
