package binarySearch.array;

/**
 * 162. 寻找峰值
 * 峰值元素是指其值大于左右相邻值的元素。
 * 给定一个输入数组 nums，其中 nums[i] ≠ nums[i+1]，找到峰值元素并返回其索引。
 * 数组可能包含多个峰值，在这种情况下，返回任何一个峰值所在位置即可。 你可以假设 nums[-1] = nums[n] = -∞。
 *
 * 示例 1: 输入: nums = [1,2,3,1] 输出: 2 解释: 3 是峰值元素，你的函数应该返回其索引 2。
 * 示例 2: 输入: nums = [1,2,1,3,5,6,4] 输出: 1 或 5  解释: 你的函数可以返回索引 1，其峰值元素为 2；或者返回索引 5， 其峰值元素为 6。
 */
public class Num162 {
    /**
     * 二分查找
     * 首先要注意题目条件，在题目描述中出现了 nums[-1] = nums[n] = -∞，这就代表着 只要数组中存在一个元素比相邻元素大，那么沿着它一定可以找到一个峰值
     * 根据上述结论，我们就可以使用二分查找找到峰值
     * 查找时，左指针 l，右指针 r，以其保持左右顺序为循环条件
     * 根据左右指针计算中间位置 m，并比较 m 与 m+1 的值，如果 m 较大，则左侧存在峰值，r = m，如果 m + 1 较大，则右侧存在峰值，l = m + 1
     *
     * 官方解释：首先从数组nums中找到中间的元素 mid。
     * 若该元素恰好位于降序序列或者一个局部下降坡度中（通过将 nums[i]与右侧比较判断)，则说明峰值会在本元素的左边。于是，我们将搜索空间缩小为 mid的左边(包括其本身)，并在左侧子数组上重复上述过程。
     * 若该元素恰好位于升序序列或者一个局部上升坡度中（通过将 nums[i]与右侧比较判断)，则说明峰值会在本元素的右边。于是，我们将搜索空间缩小为 mid的右边，并在右侧子数组上重复上述过程。
     *
     * 执行用时 :  0 ms, 在所有 java 提交中击败了100.00%的用户
     * 内存消耗 :  38.2 MB, 在所有 java 提交中击败了41.12%的用户
     */
    public int findPeakElement(int[] nums) {
        //长度为1时，峰值就是0
        if(nums.length==1) return 0;
        int l=0;
        int r=nums.length-1;
        int mid=0;
        while (l<r-1){
            mid=(l+r)/2;
            if (nums[mid]>nums[mid+1]){
                r=mid;
            }else {
                l=mid;
            }
        }
        return nums[l]>nums[r]?l:r;
    }
}
